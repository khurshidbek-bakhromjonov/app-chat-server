package uz.chatserver.controller;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import uz.chatserver.model.Message;
import uz.chatserver.model.MessageType;
import uz.chatserver.service.MessageService;

import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.StandardCopyOption;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.Base64;
import java.util.UUID;

@RestController
@RequestMapping("/messages")
public class MessageController {

    @Value("${file.upload-dir}")
    private String fileUploadDir;

    private final MessageService messageService;

    public MessageController(MessageService messageService) {
        this.messageService = messageService;
    }

    @PostMapping("/add")
    public ResponseEntity<?> addMessage(@RequestBody Message message) {
        try {
            if (message.getContentType() == MessageType.IMAGE) {
                String uniqueFilename = UUID.randomUUID().toString() + getFileExtension(message.getContent());
                String filePath = getFilePath();
                saveImageFromBase64(message.getContent(), filePath, uniqueFilename);
                message.setContent(filePath + File.separator + uniqueFilename);
            }

            Message createdMessage = messageService.addMessage(message);
            return ResponseEntity.ok(createdMessage.getId());
        } catch (Exception e) {
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(e.getMessage());
        }
    }

    private String getFileExtension(String base64Data) {
        String extension = "";

        if (base64Data != null && !base64Data.isEmpty()) {
            int startIndex = base64Data.indexOf("/");
            int endIndex = base64Data.indexOf(";");
            extension = base64Data.substring(startIndex + 1, endIndex);
        }

        return extension;
    }

    private String getFilePath() {
        LocalDate currentDate = LocalDate.now();
        String year = String.valueOf(currentDate.getYear());
        String month = currentDate.format(DateTimeFormatter.ofPattern("MM"));
        String day = currentDate.format(DateTimeFormatter.ofPattern("dd"));

        String filePath = fileUploadDir + File.separator + "uploads" + File.separator + year +
                File.separator + month + File.separator + day;

        File directory = new File(filePath);
        if (!directory.exists()) {
            directory.mkdirs();
        }

        return filePath;
    }

    private void saveImageFromBase64(String base64Data, String filePath, String filename) throws IOException {
        byte[] decodedBytes = Base64.getDecoder().decode(base64Data);

        Path path = Path.of(filePath, filename);
        Files.copy(
                new java.io.ByteArrayInputStream(decodedBytes),
                path,
                StandardCopyOption.REPLACE_EXISTING
        );
    }

    // other message-related endpoints
}
